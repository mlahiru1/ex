1. Print All Elements of a List
Print all elements of a list, separated by spaces:
```prolog
print_list([]) :- nl. % Base case: Empty list ends with a newline.
print_list([H|T]) :-
    write(H), write(' '),
    print_list(T). % Recursively print the rest of the list.
```
Query Example:
```prolog
?- print_list([a,b,c]).
% Output: a b c
```

2. Reverse a List
Reverse a list using an auxiliary predicate to add elements to the end:
```prolog
addtoend(H, [], [H]).
addtoend(H, [X|T], [X|T1]) :- addtoend(H, T, T1).

reversex([], []). % Base case: Empty list.
reversex([H|T], Y) :-
    reversex(T, T1), 
    addtoend(H, T1, Y). % Add the head to the reversed tail.
```
Query Example:
```prolog
?- reversex([a,b,c], X).
% Output: X = [c,b,a].
```

3. Create a List in a Range
Generate a list of integers from `A` to `X`:
```prolog
create_list(X, X, [X]). % Base case: Single element list.
create_list(A, X, [A|T]) :-
    A < X, 
    A1 is A + 1,
    create_list(A1, X, T).
```
Query Example:
```prolog
?- create_list(5, 12, S).
% Output: S = [5, 6, 7, 8, 9, 10, 11, 12].
```

4. Mean of a List
Compute the mean value of a list:
```prolog
sum_list([], 0, 0). % Base case: Length and sum are zero for an empty list.
sum_list([H|T], Length, Sum) :-
    sum_list(T, L1, S1),
    Length is L1 + 1,
    Sum is S1 + H.

mean(L, M) :-
    sum_list(L, Length, Sum),
    Length > 0, % Ensure the list is not empty to avoid division by zero.
    M is Sum / Length.
```
Query Example:
```prolog
?- mean([1,2,3,4,5], M).
% Output: M = 3.
```

5. Detect Whether List Contains a Number
Check if a list contains at least one numeric element:
```prolog
numberinlist([]) :- fail. % Fail if the list is empty.
numberinlist([X|_]) :- number(X). % True if the head is a number.
numberinlist([_|T]) :- numberinlist(T). % Recursively check the tail.
```
Query Example:
```prolog
?- numberinlist([a,b,c,d,e,1,f]).
% Output: true.
```

6. Increment Each Element of a List
Increment all numeric elements in a list:
```prolog
increment([], []). % Base case: Empty list.
increment([H|T], [X|Y]) :-
    X is H + 1,
    increment(T, Y).
```
Query Example:
```prolog
?- increment([5,6,7,8], X).
% Output: X = [6, 7, 8, 9].
```

7. Factorial Function
Calculate the factorial of a number:
```prolog
factorial(0, 1). % Base case: Factorial of 0 is 1.
factorial(N, X) :-
    N > 0,
    N1 is N - 1,
    factorial(N1, S),
    X is S * N.
```
Query Example:
```prolog
?- factorial(5, X).
% Output: X = 120.
```

8. Append Two Lists
Append two lists:
```prolog
appendx([], A, A). % Base case: Appending an empty list results in the second list.
appendx([H|T], A, [H|U]) :-
    appendx(T, A, U).
```
Query Example:
```prolog
?- appendx([a,1,2,b,c], [b,c,d,e], X).
% Output: X = [a,1,2,b,c,b,c,d,e].
```

9. Encapsulate List Elements
Encapsulate each element of a list in its own list:
```prolog
encapsulate([], []). % Base case: Empty list.
encapsulate([H|T], [[H]|Y]) :-
    encapsulate(T, Y).
```
Query Example:
```prolog
?- encapsulate([a,b,1,d,e], X).
% Output: X = [[a],[b],[1],[d],[e]].
```

10. Insert Zeros Between List Elements
Insert zeros between elements in a list:
```prolog
insert_zeros([], []). % Base case: Empty list.
insert_zeros([H|T], [H, 0|Y]) :-
    insert_zeros(T, Y).
```
Query Example:
```prolog
?- insert_zeros([1,2,3,4,5], X).
% Output: X = [1, 0, 2, 0, 3, 0, 4, 0, 5, 0].
```

11. Clone a List
Clone a list into two identical lists:
```prolog
clone_list(T, [T, T]).
```
Query Example:
```prolog
?- clone_list([g,6,7], X).
% Output: X = [[g,6,7], [g,6,7]].
```

12. Modify an Element in a List
Modify the Nth element in a list:
```prolog
modify_list([], _, _, []). % Base case: Empty list.
modify_list([_|T], 0, X, [X|T]). % Replace the first element.
modify_list([H|T], N, X, [H|Y]) :-
    N > 0,
    N1 is N - 1,
    modify_list(T, N1, X, Y).
```
Query Example:
```prolog
?- modify_list([m,o,d,i,f,y,e,t], 6, i, Y).
% Output: Y = [m, o, d, i, f, y, i, t].
```

13. Rotate List
Rotate a list by moving the first element to the end:
```prolog
addtoend(H, [], [H]).
addtoend(H, [X|T], [X|T1]) :- addtoend(H, T, T1).

rotate_list([H|T], L1) :-
    addtoend(H, T, L1).
```
Query Example:
```prolog
?- rotate_list([1,2,3,4,5], X).
% Output: X = [2,3,4,5,1].
```

14. Fibonacci Numbers
Calculate the Nth Fibonacci number:
```prolog
fib(1, 1).
fib(2, 1).
fib(N, F) :-
    N > 2,
    N1 is N - 1,
    fib(N1, F1),
    N2 is N - 2,
    fib(N2, F2),
    F is F1 + F2.
```
Query Example:
```prolog
?- fib(5, F).
% Output: F = 5.
```

15. Generate Random Square Matrix
Generate a random square matrix of size `N x N`:
```prolog
random10(N) :- random(0, 10, N). % Generate a random number between 0 and 9.

rand_row(0, []). % Base case: No elements in the row.
rand_row(N, [H|T]) :-
    N > 0,
    random10(H),
    N1 is N - 1,
    rand_row(N1, T).

square_matrix_rand(0, []). % Base case: No rows in the matrix.
square_matrix_rand(N, [R|T]) :-
    N > 0,
    rand_row(N, R),
    N1 is N - 1,
    square_matrix_rand(N1, T).
```
Query Example:
```prolog
?- square_matrix_rand(3, S).
% Output: S = [[2, 4, 5], [1, 0, 3], [9, 3, 2]] (randomized values).
```

